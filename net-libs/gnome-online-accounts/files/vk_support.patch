diff --git a/configure.ac b/configure.ac
index bfe13aa..4ec3ddb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -291,6 +291,28 @@ if test "$enable_facebook" != "no"; then
   AC_DEFINE(GOA_FACEBOOK_ENABLED, 1, [Enable Facebook data provider])
 fi
 
+# VKontakte
+AC_DEFINE(GOA_VK_NAME, ["vk"], [ProviderType and extension point name])
+AC_ARG_ENABLE([vk], [AS_HELP_STRING([--enable-vk],
+                                          [Enable VK provider])],
+                                          [],
+                                          [enable_vk=yes])
+AC_ARG_WITH(vk-client-id,
+            [AS_HELP_STRING([--with-vk-client-id],
+                            [VKontakte OAuth 2.0 client id])],
+                            [],
+                            [])
+
+if test "$with_vk_client_id" = ""; then
+  with_vk_client_id=3821026
+fi
+AC_DEFINE_UNQUOTED(GOA_VK_CLIENT_ID,
+                   ["$with_vk_client_id"],
+                   [VKontakte OAuth 2.0 client id])
+if test "$enable_vk" != "no"; then
+  AC_DEFINE(GOA_VK_ENABLED, 1, [Enable VKontakte data provider])
+fi
+
 # Windows Live
 AC_DEFINE(GOA_WINDOWS_LIVE_NAME, ["windows_live"], [ProviderType and extension point name])
 AC_ARG_ENABLE([windows-live], [AS_HELP_STRING([--enable-windows-live],
@@ -535,6 +557,7 @@ echo "
 	ownCloud provider:              ${enable_owncloud}
 	Kerberos provider:              ${enable_kerberos}
 	Facebook provider:              ${enable_facebook} (OAuth 2.0, id:${with_facebook_client_id})
+    VKontakte provider:             ${enable_vk} (OAuth 2.0, id:${with_vk_client_id})
 	Windows Live provider:          ${enable_windows_live} (OAuth 2.0, id:${with_windows_live_client_id})
         Telepathy provider:             ${enable_telepathy}
         Pocket provider:                ${enable_pocket} (id:${with_pocket_client_id})
diff --git a/data/icons/16x16/Makefile.am b/data/icons/16x16/Makefile.am
index 51e191d..1a8ff2d 100644
--- a/data/icons/16x16/Makefile.am
+++ b/data/icons/16x16/Makefile.am
@@ -8,6 +8,7 @@ icon_DATA =				\
 	goa-account-google.png		\
 	goa-account-owncloud.png	\
 	goa-account-pocket.png		\
+	goa-account-vk.png		\
 	goa-account-foursquare.png	\
 	$(NULL)
 
diff --git a/data/icons/16x16/goa-account-vk.png b/data/icons/16x16/goa-account-vk.png
new file mode 100644
index 0000000000000000000000000000000000000000..8a0c28cec82c17353e8da176b25ff17250e50c2c
GIT binary patch
literal 638
zcmV-^0)hRBP)<h;3K|Lk000e1NJLTq000mG000mO1^@s6AM^iV0006-Nkl<ZILnoj
zUue!@6vsc$^Lu{#KUPH6Hri~`qOJT18y6TQwIVl)ls~0hDOV`vRxaG3+_-S#?+vwt
zC?t_mMr6x+=d~HX_kH)i@80J*$Hk^l>fN`_#i{T4p3^zsV^(e7JHL5x+s(?F`W`Tp
z2c?+LJRbh^ez$9CX}i(TvZ6<T*$7lY?-FCLxwyKv*NXxQT4ueOrrU~|O-@x25oU#%
zMxtt+iXb8c5kw%ehR7N+lT%3WIOnLYiZRAe@&YK4wHN~`iW31<WmU%_wytR>J6Yt+
zl?NQ!*~OkMt4WPbaQwnu8fs&X^shri8F(?s%fV4Z1*<9que=)kLRUvKJzY!bUD?d_
z2X6t0U5p6yZ|tPAbrIdmnt1x=GZGXDiVZ>W-jn1!SMNOo;OMRm<R|k0gdi+zsHAW0
za$ICMap5+RjR_$jGBbgQP~j}M9=;<z_8qH%JLeCRBnfqumUG8;F#i1qABR)C9!%k9
zibVoeW|mm;o_w*y=}Y%;ct%D>$!4=8NkZz|IE8$U+SssTeJfKXPY3~3#fmCk0$v1B
zW$0^`Q<v|P9-lycktCC0|Jj?o8%i@($gywpa=P2+PxD1FeFsjescZb(C&o~i^3>PF
zL^dK<DB*pealsr!AU%=bY=mS|I2A>8`jme<C3X?{VgLdF&P9xlWx;?omLLk#J`gm>
z|Lyi~uD>M#6}6>8?ukM8z07h06|^+@$kfei+|;>l+r{d+3p*(5BNadkKhq!HJ|8&v
Y3(UD?s_r%=X#fBK07*qoM6N<$g8dREfdBvi

literal 0
HcmV?d00001

diff --git a/data/icons/22x22/Makefile.am b/data/icons/22x22/Makefile.am
index 0b12f12..33a674b 100644
--- a/data/icons/22x22/Makefile.am
+++ b/data/icons/22x22/Makefile.am
@@ -8,6 +8,7 @@ icon_DATA = 				\
 	goa-account-google.png		\
 	goa-account-owncloud.png	\
 	goa-account-pocket.png		\
+	goa-account-vk.png		\
 	goa-account-foursquare.png	\
 	$(NULL)
 
diff --git a/data/icons/22x22/goa-account-vk.png b/data/icons/22x22/goa-account-vk.png
new file mode 100644
index 0000000000000000000000000000000000000000..20f399f7b76e20a4523433b14c65ee718b313d09
GIT binary patch
literal 1012
zcmV<Q0}K3#P)<h;3K|Lk000e1NJLTq000&M000&U1^@s6#I$TX000BKNkl<ZILoD#
zOKg-?7>1v7=AZdHGfeGG3KVLEL8)B43j_lRC<`}|2yTcAm+rl6>&mcn<wlJx2qC&4
z(U=fj5D`N(Xak6?*P$)e-e_k!^Z)<Mob!Dy#umIJCd`|Bi*ru$=H$(JpJUbytTo&A
z9zB*Xbe_oOazkLaJ1KD-m1>pp8|OcI=R<Sgg;!qOFu3{5y_<@}4%#se16Y{+ndzxt
zj|KTc=ZW5pMdm6ENm(pysH#SK2e#PC(!!fI%w~t;hG30a(}t-5EMgO<1euO)0Scmm
zsv>O|E1;??V*|Oppk1jdDvBxus30PE?@0$KtTh;*=>)GzE=-flqyP|wa#TmPWs(jo
z#<T(yQJfb<J*rBe0xA$CO%6T2k=@%jVU6W_X@=9EUuEmI^}PPlK|1p}l6u0(d!I2r
zxybsS97pzVr;rU%;L^1c=SL^Vh5@2Vpb8>@S}L`Ky*sx6uxsl87q67KFgn4J1M@sF
zJV-hn(%YG%T%G3lGdnoEdw4a5PcD9s!J-~i1uH6ucseqcFGnZ1JU)Slk_|H)J-CZn
zoZv)OLZrOh;Qs!5*#B5@)%4W4uNnPuhD^%fMNm<!DtPa4&XeuP@b1~KPz2{Z2Ocf5
zf7ixVxF}wP&b;O5!R@T=?nG7jZu|zP&s`zck)i1v-nTMN6(89*l3CM-bDkh&m|cv?
zhlb)n56woCXZH-#-<_jgZzAH^yJLv^`n#yb31Qms+S?zaYFjr|B}iG~$}Cm|)GH!F
z(|K}Xz{yW9Q~G@t?;0#Fm8n*1#BoFvMO155;v}Y?BrGpS9DZ^OUK}EF$0$}%Jc4Lz
z8qT3=IdSR>W)_x6TP2EOYPE=36mj*JX}<Yk62vjTSmwDsTY3KJB2DK|bhT`$%{%vv
z1Z#R|I)6udpi*ma?Y9~7p=Co~o&dq9aOV6NXD^IX9Oz<wcSt=+cxbSf#cG{vrFn8;
zhNLowIduG0&98faq~2V8>??9!$aVzu6+-&D@)%<no47?(cN99(JUG}*ItXYw&(vIn
zKW;@7av|lLV+1RW68$$Yt+gZ#VQN0&=0bdX-x#Wi<J+I+{thBz@T#a90u@Ds|7FF0
zo&R%7R6$z>`3pjVc*WTEAS9xQD5|1C633;Uv>B>Yy#y&^TY>0Z&{%Pz5~kEHH0onP
z<<`tdVSe(1{=PvIH(blp+y#scWHW(Xp1;BJ;@n%tz{3N>PaR)7IQ(+1(AC$@pBGh^
i=4U6y-=DgE>ExdeqBZwz*hYT<0000<MNUMnLSTY>^xGT&

literal 0
HcmV?d00001

diff --git a/data/icons/24x24/Makefile.am b/data/icons/24x24/Makefile.am
index cced3ee..879efda 100644
--- a/data/icons/24x24/Makefile.am
+++ b/data/icons/24x24/Makefile.am
@@ -7,6 +7,7 @@ icon_DATA = 				\
 	goa-account-google.png		\
 	goa-account-owncloud.png	\
 	goa-account-pocket.png		\
+	goa-account-vk.png		\
 	goa-account-foursquare.png	\
 	goa-account-flickr.png		\
 	$(NULL)
diff --git a/data/icons/24x24/goa-account-vk.png b/data/icons/24x24/goa-account-vk.png
new file mode 100644
index 0000000000000000000000000000000000000000..9d4c1fbb042527e8c96ef3aeea255b04f583dde7
GIT binary patch
literal 1160
zcmV;31b6$1P)<h;3K|Lk000e1NJLTq000;O000;W1^@s6;CDUv000C}Nkl<ZNXM;}
zO^g&p6vuy6-7~YhGdueQxFaCoXB36Rh(Sak8jS{Glt|)7;!)#4FKXh|;6bilxhQfG
z4<dmB2^?Uv5Q7rfKyY#S6n1BKU3Q1<o|&HRde1}83=mI%FR65Q^{e-<djI$SWw^~c
zODp}s!3Q!%xF=Hs*UMMqMtLl0&6(EA#;qT%Dfag7_54igc`s%ZaWRwS@@u~x`2Ot1
z_r5R&VAIx**9?@F9PckJ_c9#??%k9|b)MPsl^cJZKf7_{&`)Rlj=`t=d{6J*zQJW)
z!xoZyJ@M`X0qYmExNvd*L$%=G2rTv&l@?{Jm%-2Fsn=uA7|i_uh!ca&(bZJ|@;RSG
z5miJ4CxX4N@GTTU6~G!_5mW_LO$T616Q%hrsw7T8!CHgw*;~9C1L-O>jf!fzX#igo
zR1^_KRjAfu66eyNzDGwkLubxou)m0BEtR0obfwk~R0(SMp2ayK-_?<Vi!{LuzERUI
z%P4ZJU$vCYFRmo(TZT?wWdHCe`R*K_ZCgiYu7g?>v19iU#;51$EoAxjlh?T!M)db|
zv18X^{;5Q$XcNHUJJaMK5i*{~$k+s*zyC4-J>4Cg9G&3GM1{)}H(2}hBNX#lIx;>{
z;@G_I36_@z0GOK(nF}IBz=)D2*J9O4n_v+~B}mveGy=dtv77a)mLe*IwHSan5u(`9
zm(TL%hSfNiw*7Z|h6uu#BuNkvR0N2zDzphsoWu7FKOY_;YD6^Rgl(@p%QGt$vaq)c
z0MA0PE5lbGZX%8oJP-C9`h$~yjss~nTJb=ztqO7?IOmAtgh~*x^Os{}j1UANUw-fs
zD+c=sf`CR8^XWTlS+bx=+=#gN_ap~~&(TQIOo(&1HpvaFnkJ%1vzi2P%HiKHFm!5+
zB#vlA4QjP2)oPW>&3SSbs$obFh7@uh8&)mF(p)Qg8_8hRDWZbVe5#-bwT5Hoz7t#?
zpP?RAsn%*#t2Hv7@Z-Ugj9#6hTB}m6*4XmGqrCduvi4e0L7R$f)ifK!39i`>B8mZ~
z=jv?Vb(Av~CYh_;WIha;zER=ySedVXILfuD3PBJsJ~hi*>mH`RJ9p~@qzJw`X&*^d
zklUol0JX^R&F*77wxo~JKsSxpF)<U8@jSNg8s_;YONfFKWiF_v8${bD@C|9rijvl_
z(K}^Dm14e=Yf~YYCIXCstZ%`9#d75I^|o&|V=)-4Y4rj4l1fgyy#Ax`3L*|`4Y`&Q
zYMNGOAeZs(@KtDTSOL^eXA~9pKdGrfjnK@Iv9sl?F`AG>A=Vg`rV`%mXf>BHU?n05
z0)V<l5?W`n$Gf|WZ|4hzE@KS7<*tWk!84FG5z$=v{K$#nck7k%bpvJr=;HjqgKsQ*
zeD#V#Pv4f5A9L6Du>$k6Gy5-%o;nv*CV%y_owEk$Gsc!wr4Psho%eO?LjZ)<^Jl~*
a<$nPnG~L%#smyBt0000<MNUMnLSTX!pDR-U

literal 0
HcmV?d00001

diff --git a/data/icons/32x32/Makefile.am b/data/icons/32x32/Makefile.am
index 4fdf763..5fb2379 100644
--- a/data/icons/32x32/Makefile.am
+++ b/data/icons/32x32/Makefile.am
@@ -8,6 +8,7 @@ icon_DATA = 				\
 	goa-account-google.png		\
 	goa-account-owncloud.png	\
 	goa-account-pocket.png		\
+	goa-account-vk.png		\
 	goa-account-foursquare.png	\
 	$(NULL)
 
diff --git a/data/icons/32x32/goa-account-vk.png b/data/icons/32x32/goa-account-vk.png
new file mode 100644
index 0000000000000000000000000000000000000000..a674b3228d531ec9b27fbd87412c5af01667c59b
GIT binary patch
literal 1395
zcmV-(1&sQMP)<h;3K|Lk000e1NJLTq001BW001Be1^@s6b9#F8000F#Nkl<ZSi{AZ
zZ-`V?7{-6++&i<o?)qm}cQe*DCB%xA5(&-B+7D$=mX#$D71Z{Rh=}^oCn2a0K~WM>
zSc2w<z_0?tD69`jW?4~ctEiZ(!Mba??(EE+duQ%>-#*;C<IFnt2X<+O!wl!1^PcBE
z&-1?Tf&ckq>P_Cb`eBRb+Y3DY?}r#L8p&7NHp%#Be!UHCO{J-)a;0uj>_h;t)@avE
zw;ve!M+TOy?%mMVcG08l9UWNfPY4Mrj=`ZphKEjV+`WBc?*#!YyQ6o*qQy(^i~Q!6
z&}9IfFr}Nkm<E@ZUw+!Neb>kDt*()v=gwZ+(QH~qv+a+DUNf=ySfdkYH6;=c^`_Zr
zt+Q{dkq5vTV~?K+7Iw6^Q;a=C6`h1pa?m+vj(6+YM>=a55Ctb{F&?Uds+p9OQ^5BO
zxll8;S)iIcRYgQFm`TffC1IlmfTAdpVo+3>L;!W_fQq7`h$KvmAv9G)oCit;)S$-H
ztQ)^?{NDNu=-8y<!~q6t;K7v(0fT2PU;c2I-v$HXIA+tjduhyOF~$&=W7dDTi+x9j
za85v!hgMxpTn1~EQXI48iv#%9VgNODB`_#9v4R*BL&-UAS$0)r;Y~}sS-Wlvp3QLY
z3!C|D{gcTXdC=9~!jFee<5|mX*I&lXOS-Ws4Y@*r%{vaDzDXpu2@5r8m`ET<YC;jg
z7{iP2ZbwqIs&LKx4xAG*nFhjAsX}cra-hQS*&O%ZvZQi2z$=?~lJN~9f{LK3h?8*u
zG{q$60Eh@bANjKq%ouq7ft6SrBbvG?J*Qj-YYk7WS%Q-!xQMd1?-&P9j1b3ZOqD9R
z#{-Zw7pefLD$l*Km2$a^bB;KUdFk<$3=9s@nDuea;hdvoilM8$kyR@efhy&4%%3AU
z*1fY6aqe79mogwy&xC@Cf=3O)BPT~0$p<uLlaeuK)^v7lc$%OXR@U9!vxqf4P$(1t
zL-Uj@&%Cyc#>PyNSyi1UDRlKDNNbU+Mx3(H`|?&wQAiYqL{Uhw7!rmdQ4|qH5kVm!
z9|Y-K$k~xmmM^?Cl|s&oC*vhZ?VqAc^-YH=IDt1m`i7ubBn*>7!!WFjVlkw-DN7**
z5d=l<>FK6tQD@?zs#vN9Q)N;+)(a{FSMwDdPKEFL2KjXNVI+<#AfhOu7=|1l9A?E6
zZ!;Q{$QJ^lD54Mq+_n62uDPNEtR~UarG6VH0SHDVsZx%*!^Oh(Z;$Z$wmqE5<**tP
z6$A34qx^LEB<-!OJonb;s49hgo}f@5m&>ts#e9Zy1=In;IhN1shUuTAC)967&cVU{
zVV-^aYc8JA$lN)z@U3Ov(E*$)#uy%Zbq6;ro`(uJQHJvcrcP<7lGoI9gi1Fw0)pb?
z{90c95hpZdeMX9oeMg7DDB`rzXc`(a?Cl#sQ4A(EU2QW`>huCZQegkC8|noXDG)pN
zH~VVu8-7(1q(wp}@issrv7Y0^2e1Zw&!~t)M6r{EzyQuEGp01S8UVhHWnO3V{(-?$
z%<P;&5KqpHq%mXYKhe*g9UuHYHs=8h9P9HA^&Kd+%<P;ux9j5WvijDgmy?Nl^@faL
zx?kk?<Hx=_-T&){V}3L#hz4L9(6r#X+uxrttMl4Rx-Rv6>rKe{PJ|OD`x*IT@Vi6b
zeDWabhJic~86X2R1G9lEfdxQI%k<VZClljGi%Mbi>@bi64gv>&(?C$oz*Jy*3MP|!
z#!TQ{RDe?Y<|FBE$y9kE17uTU+DXa4WR$Ch`wOe@wVXb|?im08002ovPDHLkV1gdA
BnL7Xg

literal 0
HcmV?d00001

diff --git a/data/icons/48x48/Makefile.am b/data/icons/48x48/Makefile.am
index 68d5d7d..907d737 100644
--- a/data/icons/48x48/Makefile.am
+++ b/data/icons/48x48/Makefile.am
@@ -7,6 +7,7 @@ icon_DATA = 				\
 	goa-account-google.png		\
 	goa-account-owncloud.png	\
 	goa-account-pocket.png		\
+	goa-account-vk.png		\
 	goa-account-flickr.png		\
 	goa-account-foursquare.png	\
 	$(NULL)
diff --git a/data/icons/48x48/goa-account-vk.png b/data/icons/48x48/goa-account-vk.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5368e37c3e3bd9e9dcc2e61b23c47026c46d52
GIT binary patch
literal 2586
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

literal 0
HcmV?d00001

diff --git a/doc/goa-docs.xml b/doc/goa-docs.xml
index 55a3558..3d6d105 100644
--- a/doc/goa-docs.xml
+++ b/doc/goa-docs.xml
@@ -181,6 +181,7 @@
       <xi:include href="xml/goaflickrprovider.xml"/>
       <xi:include href="xml/goafoursquareprovider.xml"/>
       <xi:include href="xml/goatelepathyprovider.xml"/>
+      <xi:include href="xml/goavkprovider.xml"/>
     </chapter>
   </part>
 
diff --git a/doc/goa-sections.txt b/doc/goa-sections.txt
index 73509c4..cf9818f 100644
--- a/doc/goa-sections.txt
+++ b/doc/goa-sections.txt
@@ -605,6 +605,16 @@ goa_telepathy_provider_get_type
 </SECTION>
 
 <SECTION>
+<FILE>goavkprovider</FILE>
+GoaVKProvider
+<SUBSECTION Standard>
+GOA_VK_PROVIDER
+GOA_IS_VK_PROVIDER
+GOA_TYPE_VK_PROVIDER
+goa_vk_provider_get_type
+</SECTION>
+
+<SECTION>
 <FILE>GoaMail</FILE>
 GoaMail
 GoaMailIface
diff --git a/doc/goa.types b/doc/goa.types
index c2daed1..17098c6 100644
--- a/doc/goa.types
+++ b/doc/goa.types
@@ -66,6 +66,7 @@ goa_oauth_provider_get_type
 goa_oauth2_provider_get_type
 goa_google_provider_get_type
 goa_facebook_provider_get_type
+goa_vk_provider_get_type
 goa_media_server_provider_get_type
 goa_flickr_provider_get_type
 goa_foursquare_provider_get_type
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 0dde404..35507ab 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -22,6 +22,7 @@ src/goabackend/goaprovider.c
 src/goabackend/goasmtpauth.c
 src/goabackend/goatelepathyprovider.c
 src/goabackend/goautils.c
+src/goabackend/goavkprovider.c
 src/goabackend/goawebview.c
 src/goabackend/goawindowsliveprovider.c
 src/goaidentity/goaalarm.c
diff --git a/src/goabackend/Makefile.am b/src/goabackend/Makefile.am
index 06467ec..960ce7c 100644
--- a/src/goabackend/Makefile.am
+++ b/src/goabackend/Makefile.am
@@ -94,6 +94,7 @@ libgoa_backend_1_0_la_SOURCES =						\
 	goatelepathyprovider.h		goatelepathyprovider.c		\
 	goapocketprovider.h		goapocketprovider.c		\
 	goautils.h			goautils.c			\
+	goavkprovider.h			goavkprovider.c			\
 	goawebview.h			goawebview.c			\
 	nautilus-floating-bar.h		nautilus-floating-bar.c		\
 	$(top_builddir)/src/goaidentity/org.gnome.Identity.c		\
diff --git a/src/goabackend/goaprovider.c b/src/goabackend/goaprovider.c
index 7dd40cf..2ca1fc6 100644
--- a/src/goabackend/goaprovider.c
+++ b/src/goabackend/goaprovider.c
@@ -26,6 +26,7 @@
 #include "goaexchangeprovider.h"
 #include "goagoogleprovider.h"
 #include "goafacebookprovider.h"
+#include "goavkprovider.h"
 #include "goaimapsmtpprovider.h"
 #include "goaowncloudprovider.h"
 #include "goaflickrprovider.h"
@@ -772,6 +773,9 @@ static struct
 #ifdef GOA_FACEBOOK_ENABLED
   { GOA_FACEBOOK_NAME, goa_facebook_provider_get_type },
 #endif
+#ifdef GOA_VK_ENABLED
+  { GOA_VK_NAME, goa_vk_provider_get_type },
+#endif
 #ifdef GOA_FLICKR_ENABLED
   { GOA_FLICKR_NAME, goa_flickr_provider_get_type },
 #endif
diff --git a/src/goabackend/goavkprovider.c b/src/goabackend/goavkprovider.c
new file mode 100644
index 0000000..0054ebe
--- /dev/null
+++ b/src/goabackend/goavkprovider.c
@@ -0,0 +1,1057 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General
+ * Public License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#include "config.h"
+#include <glib/gi18n-lib.h>
+
+#include <libsoup/soup.h>
+
+#include <rest/rest-proxy.h>
+#include <json-glib/json-glib.h>
+
+#include "goaprovider.h"
+#include "goaprovider-priv.h"
+#include "goaoauth2provider.h"
+#include "goavkprovider.h"
+
+#define VK_API_VERSION "5.33"
+
+/**
+ * GoaVkProvider:
+ *
+ * The #GoaVkProvider structure contains only private data and should
+ * only be accessed using the provided API.
+ */
+struct _GoaVKProvider
+{
+  /*< private >*/
+  GoaOAuth2Provider parent_instance;
+};
+
+struct _GoaVKCaptcha
+{
+  gint    check_result;
+  gchar   *img;
+  gchar   *sid;
+};
+typedef struct _GoaVKCaptcha GoaVKCaptcha;
+
+typedef enum
+{
+  VK_TOKEN_OK,
+  VK_TOKEN_CAPTCHA_NEEDED,
+  VK_TOKEN_INVALID
+} VKTokenResult;
+
+struct _VKCaptchaImg
+{
+  GtkWidget    *image;
+  GtkWidget    *spinner;
+  GtkWidget    *button;
+  GtkWidget    *input;
+  SoupMessage  *message;
+  GCancellable *cancellable;
+};
+typedef struct _VKCaptchaImg VKCaptchaImg;
+
+typedef struct _GoaVKProviderClass GoaVKProviderClass;
+
+struct _GoaVKProviderClass
+{
+  GoaOAuth2ProviderClass parent_class;
+};
+
+/**
+ * SECTION:goavkprovider
+ * @title: GoaVKProvider
+ * @short_description: A provider for VKontakte
+ *
+ * #GoaVKProvider is used for handling VKontakte accounts.
+ */
+
+G_DEFINE_TYPE_WITH_CODE (GoaVKProvider, goa_vk_provider, GOA_TYPE_OAUTH2_PROVIDER,
+                         goa_provider_ensure_extension_points_registered ();
+                         g_io_extension_point_implement (GOA_PROVIDER_EXTENSION_POINT_NAME,
+                            g_define_type_id,
+                            GOA_VK_NAME,
+                            0));
+
+static const gchar *
+get_provider_type (GoaProvider *provider)
+{
+  return GOA_VK_NAME;
+}
+
+static gchar *
+get_provider_name (GoaProvider *provider,
+                   GoaObject   *object)
+{
+  return g_strdup (_("VK"));
+}
+
+static GoaProviderGroup
+get_provider_group (GoaProvider *provider)
+{
+  return GOA_PROVIDER_GROUP_BRANDED;
+}
+
+static GoaProviderFeatures
+get_provider_features (GoaProvider *provider)
+{
+  return GOA_PROVIDER_FEATURE_BRANDED |
+         /* GOA_PROVIDER_FEATURE_CHAT | */
+         GOA_PROVIDER_FEATURE_MUSIC;
+}
+
+static gchar *
+build_authorization_uri (GoaOAuth2Provider  *oauth2_provider,
+                         const gchar        *authorization_uri,
+                         const gchar        *escaped_redirect_uri,
+                         const gchar        *escaped_client_id,
+                         const gchar        *escaped_scope)
+{
+  gchar *uri;
+
+  uri = g_strdup_printf ("%s"
+                          "?response_type=token"
+                          "&display=popup"
+                          "&v=" VK_API_VERSION
+                          "&redirect_uri=%s"
+                          "&client_id=%s"
+                          "&scope=%s",
+                          authorization_uri,
+                          escaped_redirect_uri,
+                          escaped_client_id,
+                          escaped_scope);
+  return uri;
+}
+
+static const gchar *
+get_authorization_uri (GoaOAuth2Provider *oauth2_provider)
+{
+  return "https://oauth.vk.com/oauth/authorize";
+}
+
+static const gchar *
+get_redirect_uri (GoaOAuth2Provider *oauth2_provider)
+{
+  return "https://oauth.vk.com/blank.html";
+}
+
+static const gchar *
+get_scope (GoaOAuth2Provider *oauth2_provider)
+{
+  return
+    /* "messages," */ /* to use the chat */
+    "friends,"  /* to see the list of friends (contact list) */
+    "audio,"    /* to play the music */
+    "offline";  /* to be able to use API even when user is not logged into the website */
+}
+
+static guint
+get_credentials_generation (GoaProvider *provider)
+{
+  return 1;
+}
+
+static const gchar *
+get_client_id (GoaOAuth2Provider *oauth2_provider)
+{
+  return GOA_VK_CLIENT_ID;
+}
+
+static const gchar *
+get_client_secret (GoaOAuth2Provider *oauth2_provider)
+{
+  return NULL;
+}
+
+static const gchar *
+get_authentication_cookie (GoaOAuth2Provider *oauth2_provider)
+{
+  return NULL;
+}
+
+static gint
+parse_vk_error (GError **error, JsonNode *error_node, GoaVKCaptcha *vk_captcha)
+{
+  /* This function parses the JSON error answer from the VK server,
+   * and decides what kind of GOA error corresponds to it best.
+   * Errors come in two flavours:
+   * 1. The ones that user can't do anything about are translated to
+   *    GOA_ERROR_FAILED
+   * 2. The ones that require user action (sign-in) are translated to
+   *    GOA_ERROR_NOT_AUTHORIZED
+   * There are also two special cases:
+   * 1. The CAPTCHA. If vk_captcha != NULL, the CAPTCHA parameters
+   *    are extracted and returned
+   * 2. The errors that indicate that VK API has changed, despite the
+   *    versioning. Never supposed to happen, but just in case all
+   *    the info is dumped to the debug output
+   */
+  JsonObject *error_obj;
+  gint err_code;
+  const gchar *err_msg;
+
+  JsonArray *request_params;
+  JsonObject *param;
+  JsonGenerator* json_gen;
+  gchar *debug_str;
+
+  if (!JSON_NODE_HOLDS_OBJECT(error_node)) {
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 "VK server sent an incorrect error JSON");
+    return -1;
+  }
+
+  error_obj = json_node_get_object (error_node);
+  err_code = json_object_get_int_member (error_obj, "error_code");
+  err_msg = json_object_get_string_member (error_obj, "error_msg");
+
+  switch (err_code) {
+  case 14: /* captcha required */
+    if (json_object_has_member (error_obj, "captcha_img") && json_object_has_member (error_obj, "captcha_sid")) {
+      if (vk_captcha != NULL) {
+        g_free (vk_captcha->sid);
+        g_free (vk_captcha->img);
+        vk_captcha->img = json_node_dup_string (json_object_get_member (error_obj, "captcha_img"));
+        vk_captcha->sid = json_node_dup_string (json_object_get_member (error_obj, "captcha_sid"));
+      }
+    } else {
+      g_set_error (error,
+                   GOA_ERROR,
+                   GOA_ERROR_FAILED,
+                   "Error parsing captcha parameters: no address or ID");
+      break;
+    }
+    /* no break here is intentional */
+  case 2:  /* app is switched off */
+  case 5:  /* token access revoked */
+  case 7:  /* wrong app priveleges */
+  case 17: /* validation needed */
+    /* These errors (including captcha) indicate some problems with the OAuth2 token */
+    /* "Account needs attention" sign should be shown */
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_NOT_AUTHORIZED,
+                 "OAuth2 token seems to be invalid: %s",
+                 err_msg);
+    break;
+  case 3:  /* wrong method */
+  case 8:  /* wrong request */
+  case 23: /* this method was disabled */
+  case 100: /* one or several parameters are wrong */
+  case 101: /* wrong API ID */
+    /* these errors indicate that we are royally screwed */
+    /* we should dump all the possible info from the error for debug */
+    error_node = json_node_copy (error_node);
+    error_obj = json_node_get_object (error_node);
+    request_params = json_object_get_array_member (error_obj, "request_params");
+
+    if (request_params) {
+      /* As tokens are private, we should remove it from the list of parameters before printing */
+      int i;
+      for (i = 0; i < json_array_get_length (request_params); i++) {
+        param = json_array_get_object_element (request_params, i);
+        if (param != NULL && g_strcmp0 (json_object_get_string_member (param, "key"), "access_token") == 0) {
+            json_array_remove_element (request_params, i);
+            break; /* for */
+        }
+      }
+    }
+    json_gen = json_generator_new ();
+    json_generator_set_root (json_gen, error_node);
+    debug_str = json_generator_to_data (json_gen, NULL);
+
+    g_debug ("Unhandled error from the VK server.\nError content:\n%s", debug_str);
+
+    g_free (debug_str);
+    g_object_unref (json_gen);
+    json_node_free (error_node);
+    /* no break here is intentional */
+  case 6:  /* too many requests per second */
+  case 9:  /* too many similar requests */
+  case 10: /* internal error */
+  default: /* anything else */
+    /* these errors does not require any speacial actions */
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 "The request was unsuccessfull: error_code %d (%s)",
+                 err_code,
+                 err_msg);
+  }
+  return err_code;
+}
+
+static gchar *
+get_identity_sync (GoaOAuth2Provider  *oauth2_provider,
+                   const gchar        *access_token,
+                   gchar             **out_presentation_identity,
+                   GCancellable       *cancellable,
+                   GError            **error)
+{
+  GError *identity_error;
+  RestProxy *proxy;
+  RestProxyCall *call;
+  JsonParser *parser;
+  JsonObject *json_object;
+  gchar *ret;
+  gchar *id;
+  gchar *presentation_identity;
+
+  ret = NULL;
+
+  identity_error = NULL;
+  parser = NULL;
+  id = NULL;
+  presentation_identity = NULL;
+
+  /* TODO: cancellable */
+
+  proxy = rest_proxy_new ("https://api.vk.com/method/users.get", FALSE);
+  call = rest_proxy_new_call (proxy);
+  rest_proxy_call_set_method (call, "GET");
+  rest_proxy_call_add_param (call, "v", VK_API_VERSION);
+  rest_proxy_call_add_param (call, "format", "json");
+  rest_proxy_call_add_param (call, "access_token", access_token);
+
+  if (!rest_proxy_call_sync (call, error))
+    goto out;
+  if (rest_proxy_call_get_status_code (call) != 200) {
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 _("Expected status 200 when requesting your identity, instead got status %d (%s)"),
+                 rest_proxy_call_get_status_code (call),
+                 rest_proxy_call_get_status_message (call));
+    goto out;
+  }
+
+  parser = json_parser_new ();
+  if (!json_parser_load_from_data (parser,
+                                   rest_proxy_call_get_payload (call),
+                                   rest_proxy_call_get_payload_length (call),
+                                   &identity_error)) {
+    g_warning ("json_parser_load_from_data() failed: %s (%s, %d)",
+                 identity_error->message,
+                 g_quark_to_string (identity_error->domain),
+                 identity_error->code);
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 _("Could not parse response"));
+    goto out;
+  }
+
+  json_object = json_node_get_object (json_parser_get_root (parser));
+
+  if (!json_object_has_member (json_object,"response")) {
+    if (json_object_has_member (json_object,"error")) {
+      parse_vk_error (error, json_object_get_member (json_object, "error"), NULL);
+      goto out;
+    } else {
+      g_warning ("Did not find nor response nor error.");
+      g_set_error (error,
+                   GOA_ERROR,
+                   GOA_ERROR_FAILED,
+                   _("Could not parse response"));
+      goto out;
+    }
+  }
+
+  json_object = json_array_get_object_element (json_object_get_array_member (json_object,"response"), 0);
+
+  id = g_strdup_printf ("%" G_GINT64_FORMAT, json_object_get_int_member (json_object, "id"));
+  if (id == NULL) {
+    g_warning ("Did not find id in JSON data");
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 _("Could not parse response"));
+    goto out;
+  }
+
+  if (!json_object_has_member (json_object, "first_name") || !json_object_has_member (json_object, "last_name")) {
+    g_warning ("Did not find name in JSON data");
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_FAILED,
+                 _("Could not parse response"));
+    goto out;
+  }
+
+  presentation_identity = g_strdup_printf ("%s %s",
+                                             json_object_get_string_member (json_object, "first_name"),
+                                             json_object_get_string_member (json_object, "last_name"));
+  ret = id;
+  id = NULL;
+  if (out_presentation_identity != NULL) {
+    *out_presentation_identity = presentation_identity;
+    presentation_identity = NULL;
+  }
+
+ out:
+  g_clear_error (&identity_error);
+  g_clear_object (&parser);
+  g_clear_object (&call);
+  g_clear_object (&proxy);
+  g_free (id);
+  g_free (presentation_identity);
+  return ret;
+}
+
+static void
+load_captcha_image_cb (GObject *object,
+                       GAsyncResult *result,
+                       gpointer user_data)
+{
+  VKCaptchaImg *captcha_img = (VKCaptchaImg *)user_data;
+  SoupSession *soup_session = SOUP_SESSION (object);
+  GdkPixbuf *pixbuf = NULL;
+  GInputStream *stream;
+  gboolean res = FALSE;
+
+  stream = soup_session_send_finish (soup_session, result, NULL);
+
+  if (stream != NULL) {
+    if (SOUP_STATUS_IS_SUCCESSFUL (captcha_img->message->status_code)) {
+      pixbuf = gdk_pixbuf_new_from_stream (stream, NULL, NULL);
+      if (pixbuf != NULL) {
+        gtk_image_set_from_pixbuf (GTK_IMAGE (captcha_img->image), pixbuf);
+        res = TRUE;
+        g_object_unref (pixbuf);
+      }
+    }
+    g_object_unref (stream);
+  }
+
+  if (res == TRUE || g_cancellable_is_cancelled (captcha_img->cancellable)) {
+    if (!g_cancellable_is_cancelled (captcha_img->cancellable)) {
+      gtk_widget_hide (captcha_img->spinner);
+      gtk_spinner_stop (GTK_SPINNER (captcha_img->spinner));
+      gtk_widget_set_sensitive (captcha_img->button, TRUE);
+      gtk_widget_set_sensitive (captcha_img->input, TRUE);
+      gtk_entry_set_text (GTK_ENTRY (captcha_img->input), "");
+      gtk_widget_grab_focus (captcha_img->input);
+    }
+    g_object_unref (captcha_img->message);
+    g_object_unref (soup_session);
+    g_slice_free (VKCaptchaImg, captcha_img);
+  } else {
+    /* retry */
+    soup_session_send_async (soup_session,
+                             captcha_img->message,
+                             captcha_img->cancellable,
+                             load_captcha_image_cb,
+                             captcha_img);
+  }
+}
+
+static void
+load_captcha_image (GtkWidget *image,
+                    GtkWidget *spinner,
+                    GtkWidget *button,
+                    GtkWidget *input,
+                    GCancellable *cancellable,
+                    const gchar *address)
+{
+  SoupSession *soup_session = soup_session_new ();
+  SoupMessage *soup_msg = soup_message_new ("GET", address);
+
+  VKCaptchaImg *captcha_img = g_slice_new (VKCaptchaImg);
+
+  captcha_img->image = image;
+  captcha_img->spinner = spinner;
+  captcha_img->button = button;
+  captcha_img->input = input;
+  captcha_img->message = soup_msg;
+  captcha_img->cancellable = cancellable;
+
+  soup_session_send_async (soup_session, soup_msg, cancellable, load_captcha_image_cb, captcha_img);
+}
+
+static void
+vk_token_check_cb (RestProxyCall *call,
+                   const GError *error,
+                   GObject *weak_object,
+                   gpointer user_data)
+{
+  GoaVKCaptcha *cap = (GoaVKCaptcha *)user_data;
+  JsonParser *parser = NULL;
+  JsonObject *json_object;
+
+  if (error) {
+    if (!g_error_matches (error, REST_PROXY_ERROR, REST_PROXY_ERROR_CANCELLED)) {
+      gtk_dialog_response (GTK_DIALOG (weak_object), GTK_RESPONSE_APPLY);
+      cap->check_result = VK_TOKEN_INVALID;
+    }
+    return;
+  }
+
+  cap->check_result = VK_TOKEN_INVALID;
+
+  if (rest_proxy_call_get_status_code (call) != 200)
+    goto out;
+
+  parser = json_parser_new ();
+  if (!json_parser_load_from_data (parser,
+                                   rest_proxy_call_get_payload (call),
+                                   rest_proxy_call_get_payload_length (call),
+                                   NULL))
+    goto out;
+
+  json_object = json_node_get_object (json_parser_get_root (parser));
+
+  if (json_object_has_member (json_object, "response")) {
+    if (json_object_get_int_member (json_object, "response") == 1) {
+      cap->check_result = VK_TOKEN_OK;
+      goto out;
+    }
+    goto out;
+  }
+
+  if (!json_object_has_member (json_object, "error"))
+    goto out;
+
+  if (parse_vk_error (NULL, json_object_get_member (json_object, "error"), cap) == 14)
+    cap->check_result = VK_TOKEN_CAPTCHA_NEEDED;
+
+ out:
+  g_clear_object (&parser);
+  gtk_dialog_response (GTK_DIALOG (weak_object), GTK_RESPONSE_APPLY);
+  return;
+}
+
+
+static gboolean
+vk_token_check (const gchar *access_token,
+                const gchar *text,
+                GoaVKCaptcha *cap,
+                GtkWidget *dialog)
+{
+  /* This function launches asynchronous proxy call, and relies on GtkDialog
+   * to notify it's result (GTK_RESPONSE_APPLY is used). The same dialog is
+   * also used as a weak object to cancel the proxy call.
+   */
+  gboolean submit = FALSE;
+
+  RestProxy *proxy = NULL;
+  RestProxyCall *call = NULL;
+
+  gboolean result = FALSE;
+
+  if (text != NULL && cap->sid != NULL)
+      submit = TRUE;
+
+  proxy = rest_proxy_new ("https://api.vk.com/method/users.isAppUser", FALSE);
+  call = rest_proxy_new_call (proxy);
+  rest_proxy_call_set_method (call, "GET");
+  rest_proxy_call_add_param (call, "v", VK_API_VERSION);
+  rest_proxy_call_add_param (call, "format", "json");
+  rest_proxy_call_add_param (call, "access_token", access_token);
+
+  if (submit) {
+    rest_proxy_call_add_param (call, "captcha_sid", cap->sid);
+    rest_proxy_call_add_param (call, "captcha_key", text);
+  }
+
+  if (rest_proxy_call_async (call, vk_token_check_cb, G_OBJECT (dialog), cap, NULL))
+    result = TRUE;
+
+  g_object_unref (call);
+  g_object_unref (proxy);
+  return result;
+}
+
+static void
+dialog_refresh_pressed (GtkWidget *widget,
+                        gpointer   user_data)
+{
+  gtk_dialog_response (GTK_DIALOG (user_data), GTK_RESPONSE_REJECT);
+}
+
+static void
+dialog_input_changed (GtkWidget *widget,
+                      gpointer   user_data)
+{
+  const gchar *captcha_text;
+  gboolean sensitive;
+  captcha_text = gtk_entry_get_text (GTK_ENTRY (widget));
+  sensitive = (g_strcmp0 (captcha_text, "") != 0);
+
+  gtk_dialog_set_response_sensitive (GTK_DIALOG (user_data), GTK_RESPONSE_OK, sensitive);
+}
+
+static gboolean
+goa_vk_provider_refresh_account (GoaProvider  *provider,
+                                 GoaClient    *client,
+                                 GoaObject    *object,
+                                 GtkWindow    *parent,
+                                 GError      **error)
+{
+  GoaVKProvider *vk_provider = GOA_VK_PROVIDER (provider);
+
+  gchar *access_token;
+  GoaVKCaptcha *cap = NULL;
+  gboolean check_is_running;
+  const gchar *captcha_text;
+
+  GtkWidget *dialog;
+  GtkWidget *cap_grid;
+  GtkWidget *tmp;
+  GtkWidget *cap_refresh_button;
+  GtkWidget *cap_image;
+  GtkWidget *cap_spinner;
+  GtkWidget *cap_input;
+  gint dialog_response;
+
+  GCancellable *cancellable;
+
+  g_return_val_if_fail (GOA_IS_VK_PROVIDER (vk_provider), FALSE);
+  g_return_val_if_fail (GOA_IS_CLIENT (client), FALSE);
+  g_return_val_if_fail (GOA_IS_OBJECT (object), FALSE);
+  g_return_val_if_fail (parent == NULL || GTK_IS_WINDOW (parent), FALSE);
+  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
+
+  access_token = goa_oauth2_provider_get_access_token_sync (GOA_OAUTH2_PROVIDER (provider),
+                                                            object,
+                                                            FALSE,
+                                                            NULL,
+                                                            NULL,
+                                                            NULL);
+
+  if (access_token == NULL)
+    goto out_call_default;
+
+  cap = g_slice_new0 (GoaVKCaptcha);
+
+  /* the first dialog, which is there to show something while we contact VK server */
+  dialog = gtk_dialog_new_with_buttons (NULL,
+                                        parent,
+                                        GTK_DIALOG_MODAL
+                                        | GTK_DIALOG_DESTROY_WITH_PARENT
+                                        | GTK_DIALOG_USE_HEADER_BAR,
+                                        _("Cancel"),
+                                        GTK_RESPONSE_CANCEL,
+                                        NULL);
+  gtk_header_bar_set_show_close_button (GTK_HEADER_BAR (gtk_dialog_get_header_bar (GTK_DIALOG (dialog))), FALSE);
+  gtk_window_set_title (GTK_WINDOW (dialog), _("Checking access to VK"));
+  gtk_container_set_border_width (GTK_CONTAINER (dialog), 12);
+  gtk_window_set_resizable (GTK_WINDOW (dialog), FALSE);
+  /* content of the first dialog */
+  tmp = gtk_label_new (_("Please wait for the response from VK"));
+  gtk_container_add (GTK_CONTAINER (gtk_dialog_get_content_area (GTK_DIALOG (dialog))), tmp);
+  cap_spinner = gtk_spinner_new ();
+  gtk_container_add (GTK_CONTAINER (gtk_dialog_get_content_area (GTK_DIALOG (dialog))), cap_spinner);
+  gtk_widget_show_all (dialog);
+  gtk_spinner_start (GTK_SPINNER (cap_spinner));
+
+  vk_token_check (access_token, NULL, cap, dialog);
+
+  if (gtk_dialog_run (GTK_DIALOG (dialog)) != GTK_RESPONSE_APPLY) {
+    g_free (access_token);
+    g_slice_free (GoaVKCaptcha, cap);
+    gtk_widget_destroy (dialog);
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_DIALOG_DISMISSED,
+                 _("Dialog was dismissed"));
+    return FALSE;
+  }
+
+  if (cap->check_result == VK_TOKEN_OK) {
+    g_free (access_token);
+    g_slice_free (GoaVKCaptcha, cap);
+    gtk_widget_destroy (dialog);
+    goa_account_call_ensure_credentials (goa_object_peek_account (object),
+                                         NULL, /* GCancellable */
+                                         NULL, NULL); /* callback, user_data */
+    return TRUE;
+  }
+
+  if (cap->check_result == VK_TOKEN_INVALID) {
+    gtk_widget_destroy (dialog);
+    goto out_call_default;
+  }
+
+  /* here goes CAPTCHA dialog, cleaning up the previous widgets */
+  gtk_widget_destroy (tmp);
+  gtk_widget_destroy (cap_spinner);
+  /* dialog properties */
+  gtk_window_set_title (GTK_WINDOW (dialog), _("Enter CAPTCHA"));
+  gtk_dialog_add_button (GTK_DIALOG (dialog), _("Submit"), GTK_RESPONSE_OK);
+  gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_OK);
+  /* grid properties */
+  cap_grid = gtk_grid_new ();
+  gtk_grid_set_row_spacing (GTK_GRID (cap_grid), 6);
+  gtk_grid_set_column_spacing (GTK_GRID (cap_grid), 12);
+  /* instruction label */
+  tmp = gtk_label_new (_("Enter the text from the image below"));
+  gtk_grid_attach (GTK_GRID (cap_grid), tmp, 0,0,3,1);
+  /* filler box */
+  tmp = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
+  gtk_widget_set_hexpand (tmp, TRUE);
+  gtk_grid_attach (GTK_GRID (cap_grid), tmp, 0,1,1,1);
+  /* image with spinner */
+  tmp = gtk_overlay_new ();
+  cap_image = gtk_image_new ();
+  gtk_container_add (GTK_CONTAINER (tmp), cap_image);
+  cap_spinner = gtk_spinner_new ();
+  gtk_overlay_add_overlay (GTK_OVERLAY (tmp), cap_spinner);
+  gtk_grid_attach (GTK_GRID (cap_grid), tmp, 1,1,1,1);
+  /* refresh button */
+  tmp = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
+  gtk_widget_set_hexpand (tmp, TRUE);
+  cap_refresh_button = gtk_button_new_from_icon_name ("view-refresh-symbolic", GTK_ICON_SIZE_BUTTON);
+  gtk_widget_set_halign (cap_refresh_button, GTK_ALIGN_CENTER);
+  gtk_widget_set_valign (cap_refresh_button, GTK_ALIGN_CENTER);
+  gtk_box_pack_start (GTK_BOX (tmp), cap_refresh_button, FALSE, FALSE, 0);
+  gtk_grid_attach (GTK_GRID (cap_grid), tmp, 2,1,1,1);
+  /* input */
+  cap_input = gtk_entry_new ();
+  gtk_entry_set_alignment (GTK_ENTRY (cap_input), 0.5);
+  gtk_widget_set_halign (cap_input, GTK_ALIGN_CENTER);
+  gtk_entry_set_width_chars (GTK_ENTRY (cap_input), 10);
+  gtk_entry_set_max_width_chars (GTK_ENTRY (cap_input), 10);
+  gtk_grid_attach (GTK_GRID (cap_grid), cap_input, 0,2,3,1);
+  gtk_entry_set_activates_default (GTK_ENTRY (cap_input), TRUE);
+
+  g_signal_connect (cap_refresh_button,
+                    "clicked",
+                    G_CALLBACK (dialog_refresh_pressed),
+                    dialog);
+  g_signal_connect (cap_input,
+                    "changed",
+                    G_CALLBACK (dialog_input_changed),
+                    dialog);
+
+  gtk_container_add (GTK_CONTAINER (gtk_dialog_get_content_area (GTK_DIALOG (dialog))), GTK_WIDGET (cap_grid));
+
+  gtk_widget_show_all (dialog);
+
+  cancellable = g_cancellable_new ();
+
+  check_is_running = FALSE;
+
+  gtk_spinner_start (GTK_SPINNER (cap_spinner));
+  gtk_widget_set_sensitive (cap_refresh_button, FALSE);
+  gtk_widget_set_sensitive (cap_input, FALSE);
+  gtk_dialog_set_response_sensitive (GTK_DIALOG (dialog), GTK_RESPONSE_OK, FALSE);
+
+  do {
+    if (!check_is_running) {
+      load_captcha_image (cap_image, cap_spinner, cap_refresh_button, cap_input, cancellable, cap->img);
+    }
+    dialog_response = gtk_dialog_run (GTK_DIALOG (dialog));
+
+    if (check_is_running) {
+      check_is_running = FALSE;
+    } else {
+      gtk_widget_show (cap_spinner);
+      gtk_spinner_start (GTK_SPINNER (cap_spinner));
+      gtk_widget_set_sensitive (cap_refresh_button, FALSE);
+      gtk_widget_set_sensitive (cap_input, FALSE);
+      gtk_dialog_set_response_sensitive (GTK_DIALOG (dialog), GTK_RESPONSE_OK, FALSE);
+    }
+
+    if (dialog_response == GTK_RESPONSE_OK || dialog_response == GTK_RESPONSE_REJECT) {
+      /* GTK_RESPONSE_REJECT is emitted when the "refresh" button is pressed. */
+      /* Not much different from the previous case, only no text provided to vk_token_check () */
+      captcha_text = NULL;
+      if (dialog_response == GTK_RESPONSE_OK)
+        captcha_text = gtk_entry_get_text (GTK_ENTRY (cap_input));
+
+      cap->check_result = VK_TOKEN_CAPTCHA_NEEDED;
+      dialog_response = GTK_RESPONSE_APPLY;
+      check_is_running = TRUE;
+      vk_token_check (access_token, captcha_text, cap, dialog);
+    }
+  } while ((dialog_response == GTK_RESPONSE_APPLY) && (cap->check_result == VK_TOKEN_CAPTCHA_NEEDED));
+
+  g_cancellable_cancel (cancellable);
+  g_object_unref (cancellable);
+
+  gtk_widget_destroy (dialog);
+  g_free (cap->sid);
+  g_free (cap->img);
+
+  if (cap->check_result == VK_TOKEN_OK) {
+    g_free (access_token);
+    g_slice_free (GoaVKCaptcha, cap);
+    goa_account_call_ensure_credentials (goa_object_peek_account (object),
+                                         NULL, /* GCancellable */
+                                         NULL, NULL); /* callback, user_data */
+    return TRUE;
+  }
+
+  if (cap->check_result != VK_TOKEN_INVALID) {
+    g_free (access_token);
+    g_slice_free (GoaVKCaptcha, cap);
+    g_set_error (error,
+                 GOA_ERROR,
+                 GOA_ERROR_DIALOG_DISMISSED,
+                 _("Dialog was dismissed"));
+    return FALSE;
+  }
+
+ out_call_default:
+  g_free (access_token);
+  g_slice_free (GoaVKCaptcha, cap);
+  return GOA_PROVIDER_CLASS (goa_vk_provider_parent_class)->refresh_account (provider, client, object, parent, error);
+}
+
+static gboolean
+is_deny_node (GoaOAuth2Provider *oauth2_provider, WebKitDOMNode *node)
+{
+  WebKitDOMElement *element;
+  gboolean ret;
+  gchar *id;
+
+  id = NULL;
+  ret = FALSE;
+
+  if (!WEBKIT_DOM_IS_ELEMENT (node))
+    goto out;
+
+  element = WEBKIT_DOM_ELEMENT (node);
+  id = webkit_dom_element_get_id (element);
+  if (g_strcmp0 (id, "install_cancel") != 0)
+    goto out;
+
+  ret = TRUE;
+
+ out:
+  g_free (id);
+  return ret;
+}
+
+static gboolean
+is_identity_node (GoaOAuth2Provider *oauth2_provider, WebKitDOMHTMLInputElement *element)
+{
+  gboolean ret;
+  gchar *element_type;
+  gchar *name;
+
+  element_type = NULL;
+  name = NULL;
+
+  ret = FALSE;
+
+  g_object_get (element, "type", &element_type, NULL);
+  if (g_strcmp0 (element_type, "text") != 0)
+    goto out;
+
+  name = webkit_dom_html_input_element_get_name (element);
+  if (g_strcmp0 (name, "email") != 0)
+    goto out;
+
+  ret = TRUE;
+
+ out:
+  g_free (element_type);
+  g_free (name);
+  return ret;
+}
+
+static gboolean
+is_password_node (GoaOAuth2Provider *oauth2_provider, WebKitDOMHTMLInputElement *element)
+{
+  gboolean ret;
+  gchar *element_type;
+  gchar *name;
+
+  element_type = NULL;
+  name = NULL;
+
+  ret = FALSE;
+
+  g_object_get (element, "type", &element_type, NULL);
+  if (g_strcmp0 (element_type, "password") != 0)
+    goto out;
+
+  name = webkit_dom_html_input_element_get_name (element);
+  if (g_strcmp0 (name, "pass") != 0)
+    goto out;
+
+  ret = TRUE;
+
+ out:
+  g_free (element_type);
+  g_free (name);
+  return ret;
+}
+
+static gboolean
+build_object (GoaProvider         *provider,
+              GoaObjectSkeleton   *object,
+              GKeyFile            *key_file,
+              const gchar         *group,
+              GDBusConnection     *connection,
+              gboolean             just_added,
+              GError             **error)
+{
+  GoaAccount *account = NULL;
+  /*
+  GoaChat *chat = NULL;
+  gboolean chat_enabled;
+  */
+  GoaMusic *music = NULL;
+  gboolean music_enabled;
+  gboolean ret = FALSE;
+
+  /* Chain up */
+  if (!GOA_PROVIDER_CLASS (goa_vk_provider_parent_class)->build_object (provider,
+                                                                              object,
+                                                                              key_file,
+                                                                              group,
+                                                                              connection,
+                                                                              just_added,
+                                                                              error))
+    goto out;
+
+  account = goa_object_get_account (GOA_OBJECT (object));
+
+  /* Chat */
+  /*
+  chat = goa_object_get_chat (GOA_OBJECT (object));
+  chat_enabled = g_key_file_get_boolean (key_file, group, "ChatEnabled", NULL);
+  if (chat_enabled)
+    {
+      if (chat == NULL)
+        {
+          chat = goa_chat_skeleton_new ();
+          goa_object_skeleton_set_chat (object, chat);
+        }
+    }
+  else
+    {
+      if (chat != NULL)
+        goa_object_skeleton_set_chat (object, NULL);
+    }
+  */
+  /* Music */
+  music = goa_object_get_music (GOA_OBJECT (object));
+  music_enabled = g_key_file_get_boolean (key_file, group, "MusicEnabled", NULL);
+  if (music_enabled)
+    {
+      if (music == NULL)
+        {
+          music = goa_music_skeleton_new ();
+          goa_object_skeleton_set_music (object, music);
+        }
+    }
+  else
+    {
+      if (music != NULL)
+        goa_object_skeleton_set_music (object, NULL);
+    }
+
+  if (just_added)
+    {
+      /*
+      goa_account_set_chat_disabled (account, !chat_enabled);
+      g_signal_connect (account,
+                        "notify::chat-disabled",
+                        G_CALLBACK (goa_util_account_notify_property_cb),
+                        "ChatEnabled");
+      */
+      goa_account_set_music_disabled (account, !music_enabled);
+      g_signal_connect (account,
+                        "notify::music-disabled",
+                        G_CALLBACK (goa_util_account_notify_property_cb),
+                        "MusicEnabled");
+    }
+
+  ret = TRUE;
+
+ out:
+  /* g_clear_object (&chat); */
+  g_clear_object (&music);
+  g_clear_object (&account);
+  return ret;
+}
+
+static void
+show_account (GoaProvider         *provider,
+              GoaClient           *client,
+              GoaObject           *object,
+              GtkBox              *vbox,
+              GtkGrid             *grid,
+              G_GNUC_UNUSED GtkGrid *dummy)
+{
+  gint row = 0;
+
+  goa_util_add_account_info (grid, row++, object);
+  /*
+  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
+                                                   _("Use for"),
+                                                   "chat-disabled",
+                                                   _("C_hat"));
+  */
+  goa_util_add_row_switch_from_keyfile_with_blurb (grid, row++, object,
+                                                   _("Use for"),
+                                                   "music-disabled",
+                                                   _("M_usic"));
+}
+
+static void
+add_account_key_values (GoaOAuth2Provider *oauth2_provider,
+                        GVariantBuilder   *builder)
+{
+  /* g_variant_builder_add (builder, "{ss}", "ChatEnabled", "true"); */
+  g_variant_builder_add (builder, "{ss}", "MusicEnabled", "true");
+}
+
+static void
+goa_vk_provider_init (GoaVKProvider *self)
+{
+}
+
+static void
+goa_vk_provider_class_init (GoaVKProviderClass *klass)
+{
+  GoaProviderClass *provider_class;
+  GoaOAuth2ProviderClass *oauth2_class;
+
+  provider_class = GOA_PROVIDER_CLASS (klass);
+  provider_class->get_provider_type          = get_provider_type;
+  provider_class->get_provider_name          = get_provider_name;
+  provider_class->get_provider_group         = get_provider_group;
+  provider_class->get_provider_features      = get_provider_features;
+  provider_class->refresh_account            = goa_vk_provider_refresh_account;
+  provider_class->build_object               = build_object;
+  provider_class->show_account               = show_account;
+  provider_class->get_credentials_generation = get_credentials_generation;
+
+  oauth2_class = GOA_OAUTH2_PROVIDER_CLASS (klass);
+  oauth2_class->get_authorization_uri    = get_authorization_uri;
+  oauth2_class->build_authorization_uri  = build_authorization_uri;
+  oauth2_class->get_redirect_uri         = get_redirect_uri;
+  oauth2_class->get_scope                = get_scope;
+  oauth2_class->get_client_id            = get_client_id;
+  oauth2_class->get_client_secret        = get_client_secret;
+  oauth2_class->get_authentication_cookie = get_authentication_cookie;
+  oauth2_class->get_identity_sync        = get_identity_sync;
+  oauth2_class->is_deny_node             = is_deny_node;
+  oauth2_class->is_identity_node         = is_identity_node;
+  oauth2_class->is_password_node         = is_password_node;
+  oauth2_class->add_account_key_values   = add_account_key_values;
+}
+
diff --git a/src/goabackend/goavkprovider.h b/src/goabackend/goavkprovider.h
new file mode 100644
index 0000000..f8091a9
--- /dev/null
+++ b/src/goabackend/goavkprovider.h
@@ -0,0 +1,40 @@
+/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*- */
+/*
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General
+ * Public License along with this library; if not, write to the
+ * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+ * Boston, MA 02111-1307, USA.
+ */
+
+#if !defined (__GOA_BACKEND_INSIDE_GOA_BACKEND_H__) && !defined (GOA_BACKEND_COMPILATION)
+#error "Only <goabackend/goabackend.h> can be included directly."
+#endif
+
+#ifndef __GOA_VK_PROVIDER_H__
+#define __GOA_VK_PROVIDER_H__
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GOA_TYPE_VK_PROVIDER   (goa_vk_provider_get_type ())
+#define GOA_VK_PROVIDER(o)     (G_TYPE_CHECK_INSTANCE_CAST ((o), GOA_TYPE_VK_PROVIDER, GoaVKProvider))
+#define GOA_IS_VK_PROVIDER(o)  (G_TYPE_CHECK_INSTANCE_TYPE ((o), GOA_TYPE_VK_PROVIDER))
+
+typedef struct _GoaVKProvider GoaVKProvider;
+
+GType goa_vk_provider_get_type (void) G_GNUC_CONST;
+
+G_END_DECLS
+
+#endif /* __GOA_VK_PROVIDER_H__ */
